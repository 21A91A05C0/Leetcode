class Solution {
public:
int findtheminimumpathsum(vector<vector<int>>&matrix,int i,int j,int n,int m,vector<vector<long long>>&dp)
{
    //+if(i>=n) return 1e9+7;
    
    if(i<0 || i>=n || j<0 || j>=m) return 1e9+7;
    if(i==n-1 ) return matrix[i][j];
    if(dp[i][j]!=-1) return dp[i][j];
    long long down=0;
    long long rightdown=0;
    long long leftdown=0;
    down=matrix[i][j]+findtheminimumpathsum(matrix,i+1,j,n,m,dp);
    rightdown=matrix[i][j]+findtheminimumpathsum(matrix,i+1,j+1,n,m,dp);
    leftdown=matrix[i][j]+findtheminimumpathsum(matrix,i+1,j-1,n,m,dp);
    return dp[i][j]=min(down,min(rightdown,leftdown));
}
    int minFallingPathSum(vector<vector<int>>& matrix) 
    {
        long long  n=matrix.size();
        long long m=matrix[0].size();
        vector<vector<long long>>dp(n+1,vector<long long>(m+1,0));
        for(int i=0;i<n;i++)
        {
            dp[0][i]=matrix[0][i];
        }
        for(int i=1;i<n;i++)
        {
            int top=1e9+7;
            int righttop=1e9+7;
            int lefttop=1e9+7;
            for(int j=0;j<m;j++)
            {
                if(i-1>=0 && j-1>=0) top=dp[i-1][j-1]+matrix[i][j];
                if(i-1>=0) righttop=dp[i-1][j]+matrix[i][j];
                if(i-1>=0 && j+1<m) lefttop=dp[i-1][j+1]+matrix[i][j];
                dp[i][j]=min(top,min(righttop,lefttop));
            }
        }
        int ans=1e9+7;
        for(int i=0;i<m;i++)
        {
            if(dp[n-1][i]<ans)
            {
                ans=dp[n-1][i];
            }
        }
        return ans;
        
    }
};
