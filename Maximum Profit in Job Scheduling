class Solution {
public:
int findthemaxprofit(vector<int>&startTime,vector<int>&endTime,vector<int>&profit,int n,int i,vector<int>&dp)
{
    if(i>=n) return 0;
    if(dp[i]!=-1) return dp[i];
    int pick=0;
    int notpick=0;
    int index=lower_bound(startTime.begin(),startTime.end(),endTime[i])-startTime.begin();
    pick+=profit[i]+findthemaxprofit(startTime,endTime,profit,n,index,dp);
    notpick+=findthemaxprofit(startTime,endTime,profit,n,i+1,dp);
    return dp[i]=max(pick,notpick);
}
    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) 
    {
        int n=startTime.size();
        vector<pair<int,int>>pq;
        vector<int>dp(n,-1);
       
        for(int i=0;i<startTime.size();i++)
        {
            pq.push_back({startTime[i],i});
        }
        sort(pq.begin(),pq.end());
        vector<int>st;
        vector<int>et;
        vector<int>p;
        for(auto it:pq)
        {
            st.push_back(it.first);
            et.push_back(endTime[it.second]);
            p.push_back(profit[it.second]);
        }
        return findthemaxprofit(st,et,p,n,0,dp);
    }
};
